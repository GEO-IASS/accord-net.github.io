<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <link rel="shortcut icon" href="../icons/favicon.ico" />
    <link rel="stylesheet" type="text/css" href="../styles/branding.css" />
    <link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" />
    <script type="text/javascript" src="../scripts/branding.js"> </script>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <title>C45Learning Class</title>
    <meta name="Language" content="en-us" />
    <meta name="System.Keywords" content="C45Learning class" />
    <meta name="System.Keywords" content="Accord.MachineLearning.DecisionTrees.Learning.C45Learning class" />
    <meta name="System.Keywords" content="C45Learning class, about C45Learning class" />
    <meta name="Microsoft.Help.F1" content="Accord.MachineLearning.DecisionTrees.Learning.C45Learning" />
    <meta name="Microsoft.Help.Id" content="T:Accord.MachineLearning.DecisionTrees.Learning.C45Learning" />
    <meta name="Description" content="C4.5 Learning algorithm for Decision Trees." />
    <meta name="Microsoft.Help.ContentType" content="Reference" />
    <meta name="BrandingAware" content="true" />
    
    <meta name="container" content="Accord.MachineLearning.DecisionTrees.Learning" />
    <meta name="file" content="T_Accord_MachineLearning_DecisionTrees_Learning_C45Learning" />
    <meta name="guid" content="T_Accord_MachineLearning_DecisionTrees_Learning_C45Learning" />
    
    <link type="text/css" rel="stylesheet" href="../styles/highlight.css" />
    <script type="text/javascript" src="../scripts/highlight.js"> </script>
    <link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" />
    <script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script>
    <script type="text/javascript" src="../scripts/branding-Website.js"></script>
    <script type="text/javascript" src="../scripts/clipboard.min.js"></script>
  </head>
  <body onload="OnLoad('cs')">
    <input type="hidden" id="userDataCache" class="userDataStyle" />
    <div class="pageHeader" id="PageHeader">Accord.NET Framework<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div>
    <div class="pageBody">
      <div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Accord.NET Framework" tocid="roottoc">Accord.NET Framework</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="R_Project_Accord_NET.htm" title="Framework modules" tocid="R_Project_Accord_NET">Framework modules</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="N_Accord_MachineLearning_DecisionTrees_Learning.htm" title="Accord.MachineLearning.DecisionTrees.Learning" tocid="N_Accord_MachineLearning_DecisionTrees_Learning">Accord.MachineLearning.DecisionTrees.Learning</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="T_Accord_MachineLearning_DecisionTrees_Learning_C45Learning.htm" title="C45Learning Class" tocid="T_Accord_MachineLearning_DecisionTrees_Learning_C45Learning">C45Learning Class</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Overload_Accord_MachineLearning_DecisionTrees_Learning_C45Learning__ctor.htm" title="C45Learning Constructor " tocid="Overload_Accord_MachineLearning_DecisionTrees_Learning_C45Learning__ctor">C45Learning Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Properties_T_Accord_MachineLearning_DecisionTrees_Learning_C45Learning.htm" title="C45Learning Properties" tocid="Properties_T_Accord_MachineLearning_DecisionTrees_Learning_C45Learning">C45Learning Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Methods_T_Accord_MachineLearning_DecisionTrees_Learning_C45Learning.htm" title="C45Learning Methods" tocid="Methods_T_Accord_MachineLearning_DecisionTrees_Learning_C45Learning">C45Learning Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent">
        <table class="titleTable">
          <tr>
            <td class="logoColumn">
              <img alt="Accord.NET (logo)" src="../icons/logo.png" />
            </td>
            <td class="titleColumn">
              <h1>C45Learning Class</h1>
            </td>
          </tr>
        </table>
        <span class="introStyle"></span> <div class="summary">
               C4.5 Learning algorithm for <a href="T_Accord_MachineLearning_DecisionTrees_DecisionTree.htm">Decision Trees</a>.
             </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><span class="nolink">System<span id="LSTFDE0A5DB_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</span><br />  <a href="T_Accord_MachineLearning_ParallelLearningBase.htm">Accord.MachineLearning<span id="LSTFDE0A5DB_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ParallelLearningBase</a><br />    <span class="selflink">Accord.MachineLearning.DecisionTrees.Learning<span id="LSTFDE0A5DB_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>C45Learning</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_Accord_MachineLearning_DecisionTrees_Learning.htm">Accord.MachineLearning.DecisionTrees.Learning</a><br />
    <strong>Assembly:</strong>
   Accord.MachineLearning (in Accord.MachineLearning.dll) Version: 3.6.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EBCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','cs','1','2');return false;">C#</a></div><div id="ID1EBCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID1EBCA','vb','2','2');return false;">VB</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EBCA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EBCA');return false;" title="Copy">Copy</a></div></div><div id="ID1EBCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[<span class="identifier">SerializableAttribute</span>]
<span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">C45Learning</span> : <span class="identifier">ParallelLearningBase</span>, 
	<span class="identifier">ISupervisedLearning</span>&lt;<span class="identifier">DecisionTree</span>, <span class="identifier">double</span>[], <span class="identifier">int</span>&gt;, <span class="identifier">IEnumerable</span></pre></div><div id="ID1EBCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve">&lt;<span class="identifier">SerializableAttribute</span>&gt;
<span class="keyword">Public</span> <span class="keyword">Class</span> <span class="identifier">C45Learning</span>
	<span class="keyword">Inherits</span> <span class="identifier">ParallelLearningBase</span>
	<span class="keyword">Implements</span> <span class="identifier">ISupervisedLearning</span>(<span class="keyword">Of</span> <span class="identifier">DecisionTree</span>, <span class="identifier">Double</span>(), <span class="identifier">Integer</span>), 
	<span class="identifier">IEnumerable</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EBCA");</script><a id="HT_RequestExampleLink" href="https://github.com/accord-net/framework/issues/new" target="_blank" class="button" title="Request an example for this topic">Request Example</a>
		<script type="text/javascript">
		var HT_requestExampleLink = document.getElementById("HT_RequestExampleLink");
		var HT_requestExampleLinkText = HT_requestExampleLink.innerHTML;
				
		if(HT_requestExampleLink.href.substring(0, 4).toLowerCase() == "http")
			HT_requestExampleLink.href += "?title=";
		else
			HT_requestExampleLink.href += "?subject=Accord.NET Framework: ";

		HT_requestExampleLink.href += "Add an Example for " + encodeURIComponent(document.title) + "&amp;body=" +
			encodeURIComponent("Please add an example for " + document.title + ".%0D%0DTODO (optional): Describe a specific " +
			"scenario you would like to see addressed.%0D%0DHelp Topic: " + window.location.href).replace(/%250D/g, "%0D");
		HT_requestExampleLink.innerHTML = HT_requestExampleLinkText;
		</script><a target="_blank" class="button" href="https://github.com/accord-net/framework/blob/master/Sources/Accord.MachineLearning/DecisionTrees/Learning/C45Learning.cs" title="View the source code">View Source</a></div><p>The <span class="selflink">C45Learning</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_C45Learning__ctor.htm">C45Learning<span id="LSTFDE0A5DB_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_3?cs=()|vb=|cpp=()|nu=()|fs=()");</script></a></td><td><div class="summary">
              Creates a new C4.5 learning algorithm.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_C45Learning__ctor_1.htm">C45Learning(DecisionTree)</a></td><td><div class="summary">
              Creates a new C4.5 learning algorithm.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_C45Learning__ctor_2.htm">C45Learning(<span id="LSTFDE0A5DB_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_4?cpp=array&lt;");</script>DecisionVariable<span id="LSTFDE0A5DB_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_5?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Creates a new C4.5 learning algorithm.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_Attributes.htm">Attributes</a></td><td><div class="summary">
              Gets or sets the collection of attributes to 
              be processed by the induced decision tree.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_Join.htm">Join</a></td><td><div class="summary">
              Gets or sets how many times one single variable can be
              integrated into the decision process. In the original
              ID3 algorithm, a variable can join only one time per
              decision path (path from the root to a leaf).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_MaxHeight.htm">MaxHeight</a></td><td><div class="summary">
              Gets or sets the maximum allowed 
              height when learning a tree.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_MaxVariables.htm">MaxVariables</a></td><td><div class="summary">
              Gets or sets the maximum number of variables that
              can enter the tree. A value of zero indicates there
              is no limit. Default is 0 (there is no limit on the
              number of variables).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_Model.htm">Model</a></td><td><div class="summary">
              Gets or sets the decision trees being learned.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_ParallelLearningBase_ParallelOptions.htm">ParallelOptions</a></td><td><div class="summary">
              Gets or sets the parallelization options for this algorithm.
            </div> (Inherited from <a href="T_Accord_MachineLearning_ParallelLearningBase.htm">ParallelLearningBase</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_SplitStep.htm">SplitStep</a></td><td><div class="summary">
              Gets or sets the step at which the samples will
              be divided when dividing continuous columns in
              binary classes. Default is 1.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_Accord_MachineLearning_ParallelLearningBase_Token.htm">Token</a></td><td><div class="summary">
            Gets or sets a cancellation token that can be used
            to cancel the algorithm while it is running.
            </div> (Inherited from <a href="T_Accord_MachineLearning_ParallelLearningBase.htm">ParallelLearningBase</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_Add.htm">Add</a></td><td><div class="summary">
              Adds the specified variable to the list of <span class="nolink">Attribute</span>s.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_ComputeError.htm">ComputeError</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Computes the prediction error for the tree
              over a given set of input and outputs.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">Equals</span></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">Finalize</span></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_GetEnumerator.htm">GetEnumerator</a></td><td><div class="summary">
            Returns an enumerator that iterates through the collection.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetHashCode</span></td><td><div class="summary">Serves as the default hash function. </div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">GetType</span></td><td><div class="summary">Gets the <span class="nolink">Type</span> of the current instance.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_Learn.htm">Learn(<span id="LSTFDE0A5DB_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_6?cpp=array&lt;");</script><span id="LSTFDE0A5DB_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_7?cpp=array&lt;");</script>Double<span id="LSTFDE0A5DB_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_8?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LSTFDE0A5DB_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_9?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LSTFDE0A5DB_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_10?cpp=array&lt;");</script>Int32<span id="LSTFDE0A5DB_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_11?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LSTFDE0A5DB_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_12?cpp=array&lt;");</script>Double<span id="LSTFDE0A5DB_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_13?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Learns a model that can map the given inputs to the given outputs.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_Learn_1.htm">Learn(<span id="LSTFDE0A5DB_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_14?cpp=array&lt;");</script><span id="LSTFDE0A5DB_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_15?cpp=array&lt;");</script>Int32<span id="LSTFDE0A5DB_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_16?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script><span id="LSTFDE0A5DB_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_17?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LSTFDE0A5DB_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_18?cpp=array&lt;");</script>Int32<span id="LSTFDE0A5DB_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_19?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>, <span id="LSTFDE0A5DB_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_20?cpp=array&lt;");</script>Double<span id="LSTFDE0A5DB_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_21?cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]");</script>)</a></td><td><div class="summary">
              Learns a model that can map the given inputs to the given outputs.
            </div></td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><span class="nolink">MemberwiseClone</span></td><td><div class="summary">Creates a shallow copy of the current <span class="nolink">Object</span>.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_Accord_MachineLearning_DecisionTrees_Learning_C45Learning_Run.htm">Run</a></td><td> <strong>Obsolete. </strong><div class="summary">
              Runs the learning algorithm, creating a decision
              tree modeling the given inputs and outputs.
            </div></td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><span class="nolink">ToString</span></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <span class="nolink">Object</span>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Extension Methods</span></div><div id="ID6RBSection" class="collapsibleSection"><table class="members" id="extensionMethodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_HasMethod.htm">HasMethod</a></td><td><div class="summary">
              Checks whether an object implements a method with the given name.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Math_Matrix_IsEqual_577.htm">IsEqual</a></td><td><div class="summary">Compares two objects for equality, performing an elementwise comparison if the elements are vectors or matrices.</div> (Defined by <a href="T_Accord_Math_Matrix.htm">Matrix</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_Math_Matrix_SetEquals__1.htm">SetEquals<span id="LSTFDE0A5DB_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_22?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>DecisionVariable<span id="LSTFDE0A5DB_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_23?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a></td><td><div class="summary">
              Compares two enumerables for set equality. Two
              enumerables are set equal if they contain the
              same elements, but not necessarily in the same
              order.
            </div> (Defined by <a href="T_Accord_Math_Matrix.htm">Matrix</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubextension.gif" alt="Public Extension Method" title="Public Extension Method" /></td><td><a href="M_Accord_ExtensionMethods_To__1.htm">To<span id="LSTFDE0A5DB_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_24?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTFDE0A5DB_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_25?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a></td><td><div class="summary">
              Converts an object into another type, irrespective of whether
              the conversion can be done at compile time or not. This can be
              used to convert generic types to numeric types during runtime.
            </div> (Defined by <a href="T_Accord_ExtensionMethods.htm">ExtensionMethods</a>.)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
               References:
               <ul><li>
                   Quinlan, J. R. C4.5: Programs for Machine Learning. Morgan
                   Kaufmann Publishers, 1993.</li><li>
                   Quinlan, J. R. C4.5: Programs for Machine Learning. Morgan
                   Kaufmann Publishers, 1993.</li><li>
                   Quinlan, J. R. Improved use of continuous attributes in c4.5. Journal
                   of Artificial Intelligence Research, 4:77-90, 1996.</li><li>
                   Mitchell, T. M. Machine Learning. McGraw-Hill, 1997. pp. 55-58. </li><li><a href="http://en.wikipedia.org/wiki/ID3_algorithm">
                   Wikipedia, the free encyclopedia. ID3 algorithm. Available on 
                   http://en.wikipedia.org/wiki/ID3_algorithm </a></li></ul></p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID8RBSection" class="collapsibleSection"><p>
               This example shows the simplest way to induce a decision tree with continuous variables.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFDBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAFDBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFDBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">            <span class="highlight-comment">// In this example, we will process the famous Fisher's Iris dataset in </span>
            <span class="highlight-comment">// which the task is to classify weather the features of an Iris flower </span>
            <span class="highlight-comment">// belongs to an Iris setosa, an Iris versicolor, or an Iris virginica:</span>
            <span class="highlight-comment">// </span>
            <span class="highlight-comment">//  - https://en.wikipedia.org/wiki/Iris_flower_data_set</span>
            <span class="highlight-comment">// </span>

            <span class="highlight-comment">// First, let's load the dataset into an array of text that we can process</span>
            <span class="highlight-keyword">string</span>[][] text = Resources.iris_data.Split(<span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"\r\n"</span> },
                StringSplitOptions.RemoveEmptyEntries).Apply(x =&gt; x.Split(<span class="highlight-literal">','</span>));

            <span class="highlight-comment">// The first four columns contain the flower features</span>
            <span class="highlight-keyword">double</span>[][] inputs = text.GetColumns(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">3</span>).To&lt;<span class="highlight-keyword">double</span>[][]&gt;();

            <span class="highlight-comment">// The last column contains the expected flower type</span>
            <span class="highlight-keyword">string</span>[] labels = text.GetColumn(<span class="highlight-number">4</span>);

            <span class="highlight-comment">// Since the labels are represented as text, the first step is to convert</span>
            <span class="highlight-comment">// those text labels into integer class labels, so we can process them</span>
            <span class="highlight-comment">// more easily. For this, we will create a codebook to encode class labels:</span>
            <span class="highlight-comment">// </span>
            <span class="highlight-keyword">var</span> codebook = <span class="highlight-keyword">new</span> Codification(<span class="highlight-literal">"Output"</span>, labels);

            <span class="highlight-comment">// With the codebook, we can convert the labels:</span>
            <span class="highlight-keyword">int</span>[] outputs = codebook.Translate(<span class="highlight-literal">"Output"</span>, labels);

            <span class="highlight-comment">// And we can use the C4.5 for learning:</span>
            C45Learning teacher = <span class="highlight-keyword">new</span> C45Learning();

            <span class="highlight-comment">// Finally induce the tree from the data:</span>
            <span class="highlight-keyword">var</span> tree = teacher.Learn(inputs, outputs);

            <span class="highlight-comment">// To get the estimated class labels, we can use</span>
            <span class="highlight-keyword">int</span>[] predicted = tree.Decide(inputs);

            <span class="highlight-comment">// And the classification error (of 0.0266) can be computed as </span>
            <span class="highlight-keyword">double</span> error = <span class="highlight-keyword">new</span> ZeroOneLoss(outputs).Loss(tree.Decide(inputs));

            <span class="highlight-comment">// Moreover, we may decide to convert our tree to a set of rules:</span>
            DecisionSet rules = tree.ToRules();

            <span class="highlight-comment">// And using the codebook, we can inspect the tree reasoning:</span>
            <span class="highlight-keyword">string</span> ruleText = rules.ToString(codebook, <span class="highlight-literal">"Output"</span>,
                System.Globalization.CultureInfo.InvariantCulture);

            <span class="highlight-comment">// The output is:</span>
            <span class="highlight-keyword">string</span> expected = <span class="highlight-literal">@"Iris-setosa =: (2 &lt;= 2.45)
Iris-versicolor =: (2 &gt; 2.45) &amp;&amp; (3 &lt;= 1.75) &amp;&amp; (0 &lt;= 7.05) &amp;&amp; (1 &lt;= 2.85)
Iris-versicolor =: (2 &gt; 2.45) &amp;&amp; (3 &lt;= 1.75) &amp;&amp; (0 &lt;= 7.05) &amp;&amp; (1 &gt; 2.85)
Iris-versicolor =: (2 &gt; 2.45) &amp;&amp; (3 &gt; 1.75) &amp;&amp; (0 &lt;= 5.95) &amp;&amp; (1 &gt; 3.05)
Iris-virginica =: (2 &gt; 2.45) &amp;&amp; (3 &lt;= 1.75) &amp;&amp; (0 &gt; 7.05)
Iris-virginica =: (2 &gt; 2.45) &amp;&amp; (3 &gt; 1.75) &amp;&amp; (0 &gt; 5.95)
Iris-virginica =: (2 &gt; 2.45) &amp;&amp; (3 &gt; 1.75) &amp;&amp; (0 &lt;= 5.95) &amp;&amp; (1 &lt;= 3.05)
"</span>;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFDBA");</script><p>
               This is the same example as above, but the decision variables are specified manually.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADDBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EADDBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADDBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">            <span class="highlight-comment">// In this example, we will process the famous Fisher's Iris dataset in </span>
            <span class="highlight-comment">// which the task is to classify weather the features of an Iris flower </span>
            <span class="highlight-comment">// belongs to an Iris setosa, an Iris versicolor, or an Iris virginica:</span>
            <span class="highlight-comment">// </span>
            <span class="highlight-comment">//  - https://en.wikipedia.org/wiki/Iris_flower_data_set</span>
            <span class="highlight-comment">// </span>

            <span class="highlight-comment">// First, let's load the dataset into an array of text that we can process</span>
            <span class="highlight-keyword">string</span>[][] text = Resources.iris_data.Split(<span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"\r\n"</span> },
                StringSplitOptions.RemoveEmptyEntries).Apply(x =&gt; x.Split(<span class="highlight-literal">','</span>));

            <span class="highlight-comment">// The first four columns contain the flower features</span>
            <span class="highlight-keyword">double</span>[][] inputs = text.GetColumns(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">3</span>).To&lt;<span class="highlight-keyword">double</span>[][]&gt;();

            <span class="highlight-comment">// The last column contains the expected flower type</span>
            <span class="highlight-keyword">string</span>[] labels = text.GetColumn(<span class="highlight-number">4</span>);

            <span class="highlight-comment">// Since the labels are represented as text, the first step is to convert</span>
            <span class="highlight-comment">// those text labels into integer class labels, so we can process them</span>
            <span class="highlight-comment">// more easily. For this, we will create a codebook to encode class labels:</span>
            <span class="highlight-comment">// </span>
            <span class="highlight-keyword">var</span> codebook = <span class="highlight-keyword">new</span> Codification(<span class="highlight-literal">"Output"</span>, labels);

            <span class="highlight-comment">// With the codebook, we can convert the labels:</span>
            <span class="highlight-keyword">int</span>[] outputs = codebook.Translate(<span class="highlight-literal">"Output"</span>, labels);

            <span class="highlight-comment">// Create a teaching algorithm:</span>
            <span class="highlight-keyword">var</span> teacher = <span class="highlight-keyword">new</span> C45Learning()
            {
                <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"sepal length"</span>, DecisionVariableKind.Continuous),
                <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"sepal width"</span>, DecisionVariableKind.Continuous),
                <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"petal length"</span>, DecisionVariableKind.Continuous),
                <span class="highlight-keyword">new</span> DecisionVariable(<span class="highlight-literal">"petal width"</span>, DecisionVariableKind.Continuous),
            };

            <span class="highlight-comment">// Use the learning algorithm to induce a new tree:</span>
            DecisionTree tree = teacher.Learn(inputs, outputs);

            <span class="highlight-comment">// To get the estimated class labels, we can use</span>
            <span class="highlight-keyword">int</span>[] predicted = tree.Decide(inputs);

            <span class="highlight-comment">// And the classification error (of 0.0266) can be computed as </span>
            <span class="highlight-keyword">double</span> error = <span class="highlight-keyword">new</span> ZeroOneLoss(outputs).Loss(tree.Decide(inputs));

            <span class="highlight-comment">// Moreover, we may decide to convert our tree to a set of rules:</span>
            DecisionSet rules = tree.ToRules();

            <span class="highlight-comment">// And using the codebook, we can inspect the tree reasoning:</span>
            <span class="highlight-keyword">string</span> ruleText = rules.ToString(codebook, <span class="highlight-literal">"Output"</span>,
                System.Globalization.CultureInfo.InvariantCulture);

            <span class="highlight-comment">// The output is:</span>
            <span class="highlight-keyword">string</span> expected = <span class="highlight-literal">@"Iris-setosa =: (petal length &lt;= 2.45)
Iris-versicolor =: (petal length &gt; 2.45) &amp;&amp; (petal width &lt;= 1.75) &amp;&amp; (sepal length &lt;= 7.05) &amp;&amp; (sepal width &lt;= 2.85)
Iris-versicolor =: (petal length &gt; 2.45) &amp;&amp; (petal width &lt;= 1.75) &amp;&amp; (sepal length &lt;= 7.05) &amp;&amp; (sepal width &gt; 2.85)
Iris-versicolor =: (petal length &gt; 2.45) &amp;&amp; (petal width &gt; 1.75) &amp;&amp; (sepal length &lt;= 5.95) &amp;&amp; (sepal width &gt; 3.05)
Iris-virginica =: (petal length &gt; 2.45) &amp;&amp; (petal width &lt;= 1.75) &amp;&amp; (sepal length &gt; 7.05)
Iris-virginica =: (petal length &gt; 2.45) &amp;&amp; (petal width &gt; 1.75) &amp;&amp; (sepal length &gt; 5.95)
Iris-virginica =: (petal length &gt; 2.45) &amp;&amp; (petal width &gt; 1.75) &amp;&amp; (sepal length &lt;= 5.95) &amp;&amp; (sepal width &lt;= 3.05)
"</span>;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADDBA");</script><p>
               The next example shows how to induce a decision tree for a more complicated example, again
               using a <a href="T_Accord_Statistics_Filters_Codification.htm">codebook</a> to manage how input 
               variables should be encoded. It also shows how to obtain a compiled version of the decision
               tree for deciding the class labels for new samples with maximum performance.</p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABDBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EABDBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABDBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// This example uses the Nursery Database available from the University of</span>
<span class="highlight-comment">// California Irvine repository of machine learning databases, available at</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">//   http://archive.ics.uci.edu/ml/machine-learning-databases/nursery/nursery.names</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// The description paragraph is listed as follows.</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">//   Nursery Database was derived from a hierarchical decision model</span>
<span class="highlight-comment">//   originally developed to rank applications for nursery schools. It</span>
<span class="highlight-comment">//   was used during several years in 1980's when there was excessive</span>
<span class="highlight-comment">//   enrollment to these schools in Ljubljana, Slovenia, and the</span>
<span class="highlight-comment">//   rejected applications frequently needed an objective</span>
<span class="highlight-comment">//   explanation. The final decision depended on three subproblems:</span>
<span class="highlight-comment">//   occupation of parents and child's nursery, family structure and</span>
<span class="highlight-comment">//   financial standing, and social and health picture of the family.</span>
<span class="highlight-comment">//   The model was developed within expert system shell for decision</span>
<span class="highlight-comment">//   making DEX (M. Bohanec, V. Rajkovic: Expert system for decision</span>
<span class="highlight-comment">//   making. Sistemica 1(1), pp. 145-157, 1990.).</span>
<span class="highlight-comment">// </span>

<span class="highlight-comment">// Let's begin by loading the raw data. This string variable contains</span>
<span class="highlight-comment">// the contents of the nursery.data file as a single, continuous text.</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">string</span> nurseryData = Resources.nursery;

<span class="highlight-comment">// Those are the input columns available in the data</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">string</span>[] inputColumns =
{
    <span class="highlight-literal">"parents"</span>, <span class="highlight-literal">"has_nurs"</span>, <span class="highlight-literal">"form"</span>, <span class="highlight-literal">"children"</span>,
    <span class="highlight-literal">"housing"</span>, <span class="highlight-literal">"finance"</span>, <span class="highlight-literal">"social"</span>, <span class="highlight-literal">"health"</span>
};

<span class="highlight-comment">// And this is the output, the last column of the data.</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">string</span> outputColumn = <span class="highlight-literal">"output"</span>;


<span class="highlight-comment">// Let's populate a data table with this information.</span>
<span class="highlight-comment">// </span>
DataTable table = <span class="highlight-keyword">new</span> DataTable(<span class="highlight-literal">"Nursery"</span>);
table.Columns.Add(inputColumns);
table.Columns.Add(outputColumn);

<span class="highlight-keyword">string</span>[] lines = nurseryData.Split(
    <span class="highlight-keyword">new</span>[] { <span class="highlight-literal">"\r\n"</span> }, StringSplitOptions.RemoveEmptyEntries);

<span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> line <span class="highlight-keyword">in</span> lines)
    table.Rows.Add(line.Split(<span class="highlight-literal">','</span>));


<span class="highlight-comment">// Now, we have to convert the textual, categorical data found</span>
<span class="highlight-comment">// in the table to a more manageable discrete representation.</span>
<span class="highlight-comment">// </span>
<span class="highlight-comment">// For this, we will create a codebook to translate text to</span>
<span class="highlight-comment">// discrete integer symbols:</span>
<span class="highlight-comment">// </span>
Codification codebook = <span class="highlight-keyword">new</span> Codification(table);

<span class="highlight-comment">// And then convert all data into symbols</span>
<span class="highlight-comment">// </span>
DataTable symbols = codebook.Apply(table);
<span class="highlight-keyword">double</span>[][] inputs = symbols.ToArray(inputColumns);
<span class="highlight-keyword">int</span>[] outputs = symbols.ToArray&lt;<span class="highlight-keyword">int</span>&gt;(outputColumn);

<span class="highlight-comment">// We can either specify the decision attributes we want</span>
<span class="highlight-comment">// manually, or we can ask the codebook to do it for us:</span>
DecisionVariable[] attributes = DecisionVariable.FromCodebook(codebook, inputColumns);

<span class="highlight-comment">// Now, let's create the C4.5 algorithm:</span>
C45Learning c45 = <span class="highlight-keyword">new</span> C45Learning(attributes);

<span class="highlight-comment">// and induce a decision tree from the data:</span>
DecisionTree tree = c45.Learn(inputs, outputs);

<span class="highlight-comment">// To get the estimated class labels, we can use</span>
<span class="highlight-keyword">int</span>[] predicted = tree.Decide(inputs);

<span class="highlight-comment">// And the classification error (of 0.0) can be computed as </span>
<span class="highlight-keyword">double</span> error = <span class="highlight-keyword">new</span> ZeroOneLoss(outputs).Loss(tree.Decide(inputs));

<span class="highlight-comment">// To compute a decision for one of the input points,</span>
<span class="highlight-comment">//   such as the 25-th example in the set, we can use</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">int</span> y = tree.Decide(inputs[<span class="highlight-number">25</span>]); <span class="highlight-comment">// should be 1</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABDBA");</script><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAADBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAADBA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAADBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Finally, we can also convert our tree to a native</span>
<span class="highlight-comment">// function, improving efficiency considerably, with</span>
<span class="highlight-comment">// </span>
Func&lt;<span class="highlight-keyword">double</span>[], <span class="highlight-keyword">int</span>&gt; func = tree.ToExpression().Compile();

<span class="highlight-comment">// Again, to compute a new decision, we can just use</span>
<span class="highlight-comment">// </span>
<span class="highlight-keyword">int</span> z = func(inputs[<span class="highlight-number">25</span>]);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAADBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID9RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_Accord_MachineLearning_DecisionTrees_Learning.htm">Accord.MachineLearning.DecisionTrees.Learning Namespace</a></div><div class="seeAlsoStyle"><a href="T_Accord_MachineLearning_DecisionTrees_DecisionTree.htm">Accord.MachineLearning.DecisionTrees<span id="LSTFDE0A5DB_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_26?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>DecisionTree</a></div><div class="seeAlsoStyle"><a href="T_Accord_MachineLearning_DecisionTrees_Learning_ID3Learning.htm">Accord.MachineLearning.DecisionTrees.Learning<span id="LSTFDE0A5DB_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_27?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ID3Learning</a></div><div class="seeAlsoStyle"><a href="T_Accord_MachineLearning_DecisionTrees_RandomForestLearning.htm">Accord.MachineLearning.DecisionTrees<span id="LSTFDE0A5DB_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTFDE0A5DB_28?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>RandomForestLearning</a></div></div></div>
    </div>
    <div id="pageFooter" class="pageFooter">
      <p>Accord.NET Framework © 2009-2017. All documentation is licensed under the Creative Commons Attribution/Share-Alike License.</p>
      <div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:feedback%40accord-framework.net?Subject=Accord.NET Framework">feedback@accord-framework.net</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>
  </body>
</html>